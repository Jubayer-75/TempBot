<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width,initial-scale=1" />
  <title>TempBot ‚Äî Modern Converter</title>
  <style>
    @import url('https://fonts.googleapis.com/css2?family=Poppins:wght@400;600&display=swap');

    :root {
      --bg1: #0f172a;
      --bg2: #1e293b;
      --card: rgba(255,255,255,0.06);
      --accent1: #6366f1;
      --accent2: #06b6d4;
      --accent3: #f43f5e;
      --text: #f1f5f9;
      --muted: #94a3b8;
    }

    * {
      box-sizing: border-box;
      font-family: 'Poppins', sans-serif;
    }

    body {
      margin: 0;
      min-height: 100vh;
      display: flex;
      flex-direction: column;
      justify-content: center;
      align-items: center;
      background: linear-gradient(135deg, var(--bg1), var(--bg2));
      color: var(--text);
    }

    .wrap {
      width: min(760px, 96%);
      padding: 32px;
      border-radius: 20px;
      background: var(--card);
      backdrop-filter: blur(12px);
      border: 1px solid rgba(255,255,255,0.08);
      box-shadow: 0 20px 50px rgba(0,0,0,0.4);
      animation: fadeInUp 1s ease;
      transition: transform 0.4s ease, box-shadow 0.4s ease;
    }

    .wrap:hover {
      transform: translateY(-6px);
      box-shadow: 0 25px 60px rgba(0,0,0,0.6);
    }

    @keyframes fadeInUp {
      from {opacity: 0; transform: translateY(30px);}
      to {opacity: 1; transform: translateY(0);}
    }

    h1 {
      margin: 0;
      font-size: 24px;
      background: linear-gradient(90deg, var(--accent1), var(--accent2));
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
    }

    p.lead {
      margin: 4px 0 20px;
      color: var(--muted);
      font-size: 14px;
    }

    .controls {
      display: flex;
      gap: 12px;
      flex-wrap: wrap;
      margin-bottom: 16px;
    }

    .input, .select, .btn {
      padding: 12px 14px;
      border-radius: 12px;
      border: 1px solid rgba(255,255,255,0.1);
      background: rgba(255,255,255,0.05);
      color: var(--text);
      outline: none;
      transition: all 0.3s ease;
    }

    .input:focus, .select:focus {
      border-color: var(--accent1);
      box-shadow: 0 0 10px var(--accent1);
    }

    /* Select option custom colors */
    option[value="C"] { background: var(--accent1); color: white; }
    option[value="F"] { background: var(--accent2); color: white; }
    option[value="K"] { background: var(--accent3); color: white; }

    .btn {
      cursor: pointer;
      font-weight: 600;
      letter-spacing: .5px;
    }

    .btn.primary {
      background: linear-gradient(90deg, var(--accent1), var(--accent2));
      border: none;
      color: white;
      box-shadow: 0 4px 15px rgba(99,102,241,0.4);
    }

    .btn.primary:hover {
      transform: translateY(-2px);
      box-shadow: 0 8px 25px rgba(6,182,212,0.5);
    }

    .btn.muted {
      background: rgba(255,255,255,0.05);
      border: 1px solid rgba(255,255,255,0.1);
      color: var(--muted);
    }

    .btn.muted:hover {
      color: white;
      border-color: var(--accent2);
      box-shadow: 0 0 12px rgba(6,182,212,0.4);
    }

    .result {
      margin-top: 18px;
      padding: 18px;
      border-radius: 14px;
      background: rgba(255,255,255,0.04);
      display: flex;
      justify-content: space-between;
      align-items: center;
      animation: fadeIn 0.6s ease;
    }

    .result .txt {
      font-size: 20px;
      font-weight: 600;
    }

    .small {
      font-size: 12px;
      color: var(--muted);
    }

    .warn {
      color: #facc15;
      font-weight: 600;
    }

    @keyframes fadeIn {
      from {opacity: 0;}
      to {opacity: 1;}
    }

    footer {
      margin-top: 24px;
      font-size: 12px;
      color: var(--muted);
      text-align: center;
      letter-spacing: 1px;
    }

    footer span {
      color: var(--accent2);
      font-weight: 600;
    }

    @media (max-width: 500px) {
      .controls { flex-direction: column; }
      .result { flex-direction: column; gap: 12px; }
    }
  </style>
</head>
<body>
  <div class="wrap">
    <h1>üå°Ô∏è TempBot</h1>
    <p class="lead">Convert Celsius ¬∑ Fahrenheit ¬∑ Kelvin with style</p>

    <div class="controls">
      <input id="value" class="input" type="number" placeholder="Enter value" />
      <select id="from" class="select">
        <option value="C">Celsius (¬∞C)</option>
        <option value="F">Fahrenheit (¬∞F)</option>
        <option value="K">Kelvin (K)</option>
      </select>

      <button id="swap" class="btn muted">üîÅ</button>

      <select id="to" class="select">
        <option value="F">Fahrenheit (¬∞F)</option>
        <option value="C">Celsius (¬∞C)</option>
        <option value="K">Kelvin (K)</option>
      </select>

      <button id="convert" class="btn primary">Convert</button>
    </div>

    <div class="result">
      <div>
        <div class="txt" id="output">‚Äî</div>
        <div class="small" id="explain">Enter value & convert</div>
      </div>
      <div>
        <button id="copy" class="btn muted">Copy</button>
        <button id="clear" class="btn muted">Clear</button>
      </div>
    </div>
  </div>

  <footer>ALL RIGHT DESERVE <span>JUBAYER AHMED</span></footer>

  <script>
    const toCFromF = f => (f - 32) * 5/9;
    const toCFromK = k => k - 273.15;
    const toFFromC = c => (c * 9/5) + 32;
    const toKFromC = c => c + 273.15;

    function convert(value, from, to) {
      const v = Number(value);
      if (Number.isNaN(v)) return { ok:false, msg:'Invalid number' };

      const limits = { C: -273.15, F: -459.67, K: 0 };
      if (v < limits[from]) return { ok:false, msg:`Below absolute zero for ${from}` };

      let c;
      if (from === 'C') c = v;
      else if (from === 'F') c = toCFromF(v);
      else c = toCFromK(v);

      let out;
      if (to === 'C') out = c;
      else if (to === 'F') out = toFFromC(c);
      else out = toKFromC(c);

      const rounded = (Math.round(out * 10000) / 10000).toString();
      return { ok:true, value: rounded };
    }

    const valueEl = document.getElementById('value');
    const fromEl = document.getElementById('from');
    const toEl = document.getElementById('to');
    const outEl = document.getElementById('output');
    const explainEl = document.getElementById('explain');

    document.getElementById('convert').addEventListener('click', doConvert);
    document.getElementById('swap').addEventListener('click', () => {
      [fromEl.value, toEl.value] = [toEl.value, fromEl.value];
    });
    document.getElementById('clear').addEventListener('click', () => {
      valueEl.value = '';
      outEl.textContent = '‚Äî';
      explainEl.textContent = 'Enter value & convert';
    });
    document.getElementById('copy').addEventListener('click', async () => {
      if (outEl.textContent !== '‚Äî') {
        await navigator.clipboard.writeText(outEl.textContent);
        explainEl.textContent = 'Copied ‚úÖ';
        setTimeout(()=> explainEl.textContent = '', 1500);
      }
    });

    function doConvert() {
      const v = valueEl.value.trim();
      const res = convert(v, fromEl.value, toEl.value);
      if (!v) { outEl.textContent = 'Enter a value'; return; }
      if (!res.ok) {
        outEl.innerHTML = `<span class="warn">${res.msg}</span>`;
        explainEl.textContent = '';
        return;
      }
      outEl.textContent = `${res.value} ${unitLabel(toEl.value)}`;
      explainEl.textContent = `${v} ${unitLabel(fromEl.value)} ‚Üí ${res.value} ${unitLabel(toEl.value)}`;
    }

    function unitLabel(u) {
      if (u==='C') return '¬∞C';
      if (u==='F') return '¬∞F';
      return 'K';
    }
  </script>
</body>
</html>
